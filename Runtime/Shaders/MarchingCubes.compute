#pragma kernel March
#include "MarchTables.compute"

static const int numThreads = 1;

struct Vertice {
    float3 vertex;
    float2 uv;
    float2 uv2;
    float3 color;
};

struct Triangle {
    Vertice verticeA;
    Vertice verticeB;
    Vertice verticeC;
};

struct Dato {
    float3 posicion;
    float valor;
};

AppendStructuredBuffer<Triangle> triangles;
StructuredBuffer<Dato> datos;
StructuredBuffer<int> indices;
StructuredBuffer<float2> uvs;
StructuredBuffer<float2> uvs2;
StructuredBuffer<float4> colores;

int cantidadPorEje;
int cantidadIndices;
float isoLevel;

float invLerp(float from, float to, float value) {
    return (value - from) / (to - from);
}

float3 interpolate(float4 v1, float4 v2) {
    float t = invLerp(v1.w, v2.w, isoLevel);
    return lerp(v1.xyz, v2.xyz, t);
}

float2 interpolate(float3 v1, float3 v2) {
    float t = invLerp(v1.z, v2.z, isoLevel);
    return lerp(v1.xy, v2.xy, t);
}

float3 interpolateExtremos(float4 v1, float4 v2) {
    return lerp(v1.xyz, v2.xyz, v1.w > isoLevel);
}

float2 interpolateExtremos(float3 v1, float3 v2) {
    return lerp(v1.xy, v2.xy, v1.z > isoLevel);
}

float4 pointAtIndex(int i) {
    Dato dato = datos[i];
    return float4(dato.posicion, dato.valor);
}

float3 uvAtIndex(int i) {
    float valor = datos[i].valor;
    float2 uv = uvs[i];
    return float3(uv, valor);
}

float3 uv2AtIndex(int i) {
    float valor = datos[i].valor;
    float2 uv2 = uvs2[i];
    return float3(uv2, valor);
}

float4 colorAtIndex(int i) {
    float valor = datos[i].valor;
    float3 color = colores[i].rgb;
    return float4(color, valor);
}

[numthreads(numThreads, numThreads, numThreads)]
void March(int3 id : SV_DispatchThreadID) {

    int indice = (id.x + id.y * cantidadPorEje + id.z * cantidadPorEje * cantidadPorEje) * 8;

    if (indice >= cantidadIndices) return;

    float4 cubeCorners[8];
    float3 uvCorners[8];
    float3 uv2Corners[8];
    float4 colorCorners[8];

    for (int w = 0; w < 8; w++) {
        int indiceActual = indices[indice + w];
        cubeCorners[w] = pointAtIndex(indiceActual);
        uvCorners[w] = uvAtIndex(indiceActual);
        uv2Corners[w] = uv2AtIndex(indiceActual);
        colorCorners[w] = colorAtIndex(indiceActual);
    }

    int cubeIndex = 0;
    for (int j = 0, nivel = 1; j < 8; j++, nivel *= 2) {
        cubeIndex |= nivel * (cubeCorners[j].w < isoLevel);
    }

    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {

        Vertice vertices[3];

        for (int z = 0; z < 3; z++) {
            int a = cornerIndexAFromEdge[triangulation[cubeIndex][i + z]];
            int b = cornerIndexBFromEdge[triangulation[cubeIndex][i + z]];

            vertices[z].vertex = interpolate(cubeCorners[a], cubeCorners[b]);
            vertices[z].uv = interpolateExtremos(uvCorners[a], uvCorners[b]);
            vertices[z].uv2 = interpolateExtremos(uv2Corners[a], uv2Corners[b]);
            vertices[z].color = interpolateExtremos(colorCorners[a], colorCorners[b]);
        }

        Triangle tri;
        tri.verticeA = vertices[0];
        tri.verticeB = vertices[1];
        tri.verticeC = vertices[2];
        triangles.Append(tri);
    }
}
