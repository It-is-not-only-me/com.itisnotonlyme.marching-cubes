#pragma kernel March
#include "MarchTables.compute"

static const int numThreads = 1;

struct Triangle {
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;
    float2 uvA;
    float2 uvB;
    float2 uvC;
};

struct Dato {
    float3 posicion;
    float2 uv;
    float valor;
};

AppendStructuredBuffer<Triangle> triangles;
StructuredBuffer<Dato> datos;

int3 numPointsPerAxis;
float isoLevel;

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

float2 interpolateUV(float3 v1, float3 v2) {
    float t = (isoLevel - v1.z) / (v2.z - v1.z);
    return v1.xy + t * (v2.xy - v1.xy);
}

int indexFromCoord(int x, int y, int z) {
    return z + y * numPointsPerAxis.z + x * numPointsPerAxis.z * numPointsPerAxis.y;
}

float4 pointAtIndex(int i) {
    Dato dato = datos[i];
    return float4(dato.posicion, dato.valor);
}

float3 uvAtIndex(int i) {
    Dato dato = datos[i];
    return float3(dato.uv, dato.valor);
}

[numthreads(numThreads, numThreads, numThreads)]
void March(int3 id : SV_DispatchThreadID) {

    float4 cubeCorners[8] = {
        pointAtIndex(indexFromCoord(id.x, id.y, id.z)),
        pointAtIndex(indexFromCoord(id.x + 1, id.y, id.z)),
        pointAtIndex(indexFromCoord(id.x + 1, id.y, id.z + 1)),
        pointAtIndex(indexFromCoord(id.x, id.y, id.z + 1)),
        pointAtIndex(indexFromCoord(id.x, id.y + 1, id.z)),
        pointAtIndex(indexFromCoord(id.x + 1, id.y + 1, id.z)),
        pointAtIndex(indexFromCoord(id.x + 1, id.y + 1, id.z + 1)),
        pointAtIndex(indexFromCoord(id.x, id.y + 1, id.z + 1))
    };

    float3 uvCorners[8] = {
        uvAtIndex(indexFromCoord(id.x, id.y, id.z)),
        uvAtIndex(indexFromCoord(id.x + 1, id.y, id.z)),
        uvAtIndex(indexFromCoord(id.x + 1, id.y, id.z + 1)),
        uvAtIndex(indexFromCoord(id.x, id.y, id.z + 1)),
        uvAtIndex(indexFromCoord(id.x, id.y + 1, id.z)),
        uvAtIndex(indexFromCoord(id.x + 1, id.y + 1, id.z)),
        uvAtIndex(indexFromCoord(id.x + 1, id.y + 1, id.z + 1)),
        uvAtIndex(indexFromCoord(id.x, id.y + 1, id.z + 1))
    };

    int cubeIndex = 0;
    for (int j = 0, nivel = 1; j < 8; j++, nivel *= 2) {
        cubeIndex |= nivel * (cubeCorners[j].w < isoLevel);
    }

    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {

        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

        Triangle tri;

        tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.uvA = interpolateUV(uvCorners[a0], uvCorners[b0]);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.uvB = interpolateUV(uvCorners[a1], uvCorners[b1]);
        tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
        tri.uvC = interpolateUV(uvCorners[a2], uvCorners[b2]);

        triangles.Append(tri);
    }
}
