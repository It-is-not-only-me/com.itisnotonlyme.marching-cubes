#pragma kernel March
#include "MarchTables.compute"

static const int numThreads = 10;

struct Triangle {
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;

    float3 normal;
};

struct Dato {
    int3 posicion;
    float valor;
};

AppendStructuredBuffer<Triangle> triangles;
StructuredBuffer<Dato> datos;

float isoLevel;
int3 numPointsPerAxis;

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

int indexEnPunto(int x, int y, int z)
{
    return z * numPointsPerAxis.x * numPointsPerAxis.y + y * numPointsPerAxis.x + x;
}

float4 valorEnPunto(int x, int y, int z)
{
    int3 posicion = datos[indexEnPunto(x, y, z)].posicion;
    float valor = datos[indexEnPunto(x, y, z)].valor;

    return float4(posicion, valor);
}

[numthreads(numThreads, numThreads, numThreads)]
void March(int3 id : SV_DispatchThreadID)
{
    for (int pos = 0; pos < 3; pos++)
        if (id[pos] >= numPointsPerAxis[pos] - 1)
            return;

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        valorEnPunto(id.x, id.y, id.z),
        valorEnPunto(id.x + 1, id.y, id.z),
        valorEnPunto(id.x + 1, id.y, id.z + 1),
        valorEnPunto(id.x, id.y, id.z + 1),
        valorEnPunto(id.x, id.y + 1, id.z),
        valorEnPunto(id.x + 1, id.y + 1, id.z),
        valorEnPunto(id.x + 1, id.y + 1, id.z + 1),
        valorEnPunto(id.x, id.y + 1, id.z + 1)
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        Triangle tri;

        for (int j = 0; j < 3; j++)
        {
            int a = cornerIndexAFromEdge[triangulation[cubeIndex][i + j]];
            int b = cornerIndexBFromEdge[triangulation[cubeIndex][i + j]];

            float3 posicion = interpolateVerts(cubeCorners[a], cubeCorners[b]);

            switch (j)
            {
                case 0: tri.vertexA = posicion; break;
                case 1: tri.vertexB = posicion; break;
                case 2: tri.vertexC = posicion; break;
            }
        }

        tri.normal = normalize(cross(tri.vertexB - tri.vertexA, tri.vertexC - tri.vertexA));
        triangles.Append(tri);
    }
}
